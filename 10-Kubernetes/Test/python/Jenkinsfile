pipeline {
    agent any

    environment {
        KUBECONFIG = credentials('kubeconfig-credentials-id')
        DOCKER_USERNAME = credentials('dockerhub-username')
        DOCKER_PASSWORD = credentials('dockerhub-password')
        DOCKER_REGISTRY = "docker.io"
    }

    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        sh '''
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        '''
                    }
                }
            }
        }

        stage('Build Docker Images') {
            stage('Build python app') {
                steps {
                    script {
                        sh '''
                        docker build -t $DOCKER_USERNAME/python-app:${BUILD_NUMBER} .
                        docker push $DOCKER_USERNAME/python-app:${BUILD_NUMBER}
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([
                    string(credentialsId: 'postgres-secret', variable: 'POSTGRES_SECRETS')
                    file(credentialsId: 'k8s-test-kubeconfig-new', variable: 'KUBECONFIG_PATH')
                ]){
                    script {
                        def secrets = readJSON(text: POSTGRES_SECRETS)
                        sh """
                        export KUBECONFIG=${KUBECONFIG_PATH}

                        kubectl create secret generic postgres-and-python-secret \
                          --from-literal=DB_NAME=${secrets.DB_NAME} \
                          --from-literal=DB_USER=${secrets.DB_USER} \
                          --from-literal=DB_PASSWORD=${secrets.DB_PASSWORD}

                        helm upgrade --install python-postgres-chart ./python-postgres-chart -n ms --create-namespace \
                            --set image.repository=$DOCKER_USERNAME/python-app \
                            --set image.tag=${BUILD_NUMBER}
                        """
                    }
                }
            }
        }
        stage('Post-Deployment Tests') {
            steps {
                script {
                    sh '''
                    curl -f http://kubernetes-service-url/python-app/health
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Cleaning up workspace...'
                cleanWs()
            }
        }
        success {
            script {
                echo 'Deployment succeeded!'
            }
        }
        failure {
            script {
                echo 'Deployment failed! Check logs for details.'
            }
        }
    }
}
