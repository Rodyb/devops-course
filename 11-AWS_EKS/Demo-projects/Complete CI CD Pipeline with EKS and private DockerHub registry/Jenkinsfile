pipeline {
    agent any
    tools {
        maven 'Maven'
    }
    stages {
        stage('increment version') {
            steps {
                script {
                    echo 'incrementing app version...'
                    sh 'mvn build-helper:parse-version versions:set \
                        -DnewVersion=${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.${BUILD_NUMBER} \
                        versions:commit'
                    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                    def version = matcher[0][1]
                    env.IMAGE_NAME = "${version}-${BUILD_NUMBER}"
                }
            }
        }
        stage("build app") {
            steps {
                echo 'build app jar...'
                sh 'mvn clean package'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building the Docker image...'
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                        sh 'docker build -t rodybothe2/demo-app:${IMAGE_NAME} .'
                        sh 'echo $PASS | docker login -u $USER --password-stdin'
                        sh 'docker push rodybothe2/demo-app:${IMAGE_NAME}'
                    }
                }
            }
        }

        stage('Deploy') {
            environment {
                AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
                APP_NAME = 'java-maven-app'
                PATH = "/usr/local/bin:${env.PATH}"

            }
            steps {
                script {
                    echo 'Deploying Docker image...'
                    sh 'envsubst < Kubernetes/deployment.yaml | kubectl apply -f -'
                    sh 'envsubst < Kubernetes/deployment.yaml | kubectl apply -f -'                }
            }
        }

        stage('Commit Version Update') {
            steps {
                script {
                    echo 'Committing version update...'
                    withCredentials([usernamePassword(credentialsId: 'gitlab-credentials', passwordVariable: 'GIT_PASS', usernameVariable: 'GIT_USER')]) {
                        sh 'git config --global user.email "rody...@gmail.com"'
                        sh 'git config --global user.name "Rody b"'
                        sh 'git checkout -b version-update'
                        sh 'git add .'
                        sh 'git commit -m "Version update"'
                        sh 'git push https://$GIT_USER:$GIT_PASS@gitlab.com/11-AWS_EKS.git --all'
                    }
                }
            }
        }
    }
}