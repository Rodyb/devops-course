#!/usr/bin/env groovy

// library identifier: 'jenkins-shared-library@master', retriever: modernSCM(
//   [$class: 'GitSCMSource',
//   remote: 'https://gitlab.com/twn-devops-bootcamp/latest/12-terraform/jenkins-shared-library.git',
//   credentialsId: 'gitlab-credentials'
//   ]
// )
def scriptFile = load 'script.groovy'

pipeline {
  agent any
  tools {
    maven 'maven'
  }
  environment {
    IMAGE_NAME = 'rodybothe2/mvn:1.1.0-SNAPSHOT-20'
  }
  stages {
    stage("build app") {
      steps {
        script {
            dir("java-maven-app2") {
              echo 'building application jar...'
              sh 'mvn package'
          }
        }
      }
    }
//     stage("build image") {
//       steps {
//         script {
//           echo 'building docker image...'
//           scriptFile.buildImage(env.IMAGE_NAME)
//           scriptFile.dockerLogin()
//           scriptFile.dockerPush(env.IMAGE_NAME)
//         }
//       }
//     }
    stage("provison server") {
      environment {
        AWS_ACCESS_KEY_ID = credentials("jenkins_aws_access_key_id")
        AWS_SECRET_ACCESS_KEY_ID = credentials("jenkins_aws_secret_access_key")
        TF_VAR_env_prefix = "test"
      }
      steps {
        script {
           dir ("terraform") {
              sh "terraform init"
              sh "terraform apply --auto-approve "
              EC2_PUBLIC_IP = sh (
                  script: "terraform output ec2_public_ip",
                  returnStdout: true
              ).trim()
           }
        }
      }
    }
    stage("deploy") {
    environment {
        DOCKER_CREDENTIALS = credentials('docker-credentials')
    }
      steps {
        script {
          echo "waiting for EC2 Server to be  up and running"
          sleep(time: 90, unit: "SECONDS")

          echo 'deploying docker image to EC2...'
          echo "${EC2_PUBLIC_IP}"

          def shellCmd = "bash ./server-cmds.sh ${IMAGE_NAME} ${DOCKER_CREDENTIALS_USR} ${DOCKER_CREDS_PSW}"
          def ec2Instance = "ec2-user@${EC2_PUBLIC_IP}"

          sshagent(['server-ssh-key']) {
            sh "scp -o server-cmds.sh ${ec2Instance}:/home/ec2-user"
            sh "scp -o docker-compose.yaml ${ec2Instance}:/home/ec2-user"
            sh "ssh -o StrictHostKeyChecking=no ${ec2Instance} ${shellCmd}"
          }
        }
      }
    }
  }
}
